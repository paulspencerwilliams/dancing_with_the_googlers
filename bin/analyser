#!/usr/bin/env ruby
  
def count_good_googlers(line, cached_triplets)
  numbers = line.split(" ")
  suprises_left = numbers[1].to_i
  good_min = numbers[2].to_i
  

  googlers = numbers.slice(3, numbers.length).inject([]) { | googlers, score | googlers << score.to_i }
  
  unsuprisingly_beating_good_min = 0 
  beating_good_min_with_suprising = 0 
  never_going_to_beat_good_min = 0 
   
  googlers.each do | googler |
    matching_triplets = cached_triplets[googler]
    if matching_triplets[:unsuprised][0][2] >= good_min
      unsuprisingly_beating_good_min = unsuprisingly_beating_good_min + 1  
    elsif matching_triplets[:suprised].length == 1
      if matching_triplets[:suprised][0][2] >= good_min
      beating_good_min_with_suprising = beating_good_min_with_suprising + 1 
      end
    else
     never_going_to_beat_good_min = never_going_to_beat_good_min + 1 
    end
  end
  #puts(line)
  #puts(unsuprisingly_beating_good_min)
  #puts(beating_good_min_with_suprising)
  #puts(never_going_to_beat_good_min)
  if (suprises_left > beating_good_min_with_suprising)
    unsuprisingly_beating_good_min + beating_good_min_with_suprising 
  else
    unsuprisingly_beating_good_min + suprises_left 
  end
end

def generate_triplets
  triplets = {} 
  (0..10).each do | lowest |
    (lowest..10).each do | middle |
      (middle..10).each do | highest |
        if highest - lowest <= 2
          total = lowest + middle + highest
          unless triplets.has_key?(total)
            triplets[total] = { :unsuprised => [], :suprised => []}
          end
          triplet = triplets[total]
          if highest - lowest == 2
            triplet[:suprised] << [lowest, middle, highest]
          else
            triplet[:unsuprised] << [lowest, middle, highest]
          end 
        end
      end
    end
  end
  triplets
end

File.open(ARGV[0]) do |f|
  cached_triplets = generate_triplets
  f.each_line.with_index do |line, index|
    if index > 0 
      STDOUT << "Case ##{index}: #{count_good_googlers(line, cached_triplets)}\n"
    end
  end
end


